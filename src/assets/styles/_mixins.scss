@mixin break($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: #{ map-get( $breakpoints, $breakpoint ) }) {
            @content;
        }
    }

    @else if type_of($breakpoint)==number and unit($breakpoint)==px or unit($breakpoint)==em or unit($breakpoint)==rem {
        @media (min-width: $breakpoint) {
            @content;
        }
    }

    @else {
        @warn "No value could be retrieved from `#{$breakpoint}`. "
        +"It is either not defined in the `$breakpoints` map, or it is an invalid number of px, em, or rem.";
    }
}

@mixin linear-gradient($color-one, $color-two, $degrees) {
    background: -moz-linear-gradient($degrees, $color-one 0%, $color-two 100%);
    /* ff3.6+ */
    background: -webkit-gradient(linear, left top, right top, color-stop(0%, $color-one), color-stop(100%, $color-two));
    /* safari4+,chrome */
    background: -webkit-linear-gradient($degrees, $color-one 0%, $color-two 100%);
    /* safari5.1+,chrome10+ */
    background: -o-linear-gradient($degrees, $color-one 0%, $color-two 100%);
    /* opera 11.10+ */
    background: -ms-linear-gradient($degrees, $color-one 0%, $color-two 100%);
    /* ie10+ */
    background: linear-gradient($degrees, $color-one 0%, $color-two 100%);
    /* w3c */
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$color-one', endColorstr='$color-two', GradientType=1);
    /* ie6-9 */
}

@mixin headings($from: 1, $to: 6) {
    @for $i from $from through $to {
        h#{$i} {
            @content
        }
    }
}

@mixin headings-all() {

    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    .h1,
    .h2,
    .h3,
    .h4,
    .h5,
    .h6 {
        @content
    }

    @include headings-sizes-ms();
}

@mixin headings-sizes-ms() {

    h1,
    .h1 {
        font-size: 5.5rem;
        line-height: 6rem;
    }

    h2,
    .h2 {
        font-size: 2.5rem;
        line-height: 2.9rem;
    }

    h3,
    .h3 {
        font-size: 1.6rem;
    }

    h4,
    .h4 {
        font-size: 1.4rem;
    }

    h5,
    .h5 {
        font-size: 1.2rem;
    }

    h6,
    .h6 {
        font-size: 1.1rem;
    }
}

@include headings-all() {
    // color: green;
}

@include headings() {}

div {
    @include headings() {
        // color:red;
    }
}

.sweet {
    @include headings(1, 3) {
        // color:red;
    }

    // headings(4,6) or just headings(4)
    @include headings(4) {
        // color:blue;
    }
}

// Paddings and margins
$sides: ("": "",
"t": "top",
"b": "bottom",
"l": "left",
"r": "right",
);

$unit: "rem";

@each $breakName,
$breakValue in $breakpoints {

    @each $sideName,
    $sideValue in $sides {
        @for $i from 0 through 10 {

            $property: if($sideName=='', '', -#{$sideValue});
            $space: $i * 1;
            $selector: '';

            @if $breakName !="" {
                $selector: #{$sideName}-#{$breakName}-#{$i};
            }

            @else {
                $selector: #{$sideName}-#{$i};
            }

            @if $breakName !="" {
                @media (min-width: $breakValue) {
                    .m#{$selector} {
                        margin#{$property}: #{$space + $unit};
                    }

                    .p#{$selector} {
                        padding#{$property}: #{$space + $unit};
                    }
                }
            }

            @else {
                .m#{$selector} {
                    margin#{$property}: #{$space + $unit};
                }

                .p#{$selector} {
                    padding#{$property}: #{$space + $unit};
                }
            }
        }
    }
}

// Fonts
    @for $i from 0 through 5 {

        $space: $i * 1;
        $selector: #{$i};
        $unit: "rem";

        .f-#{$selector} {
            font-size: #{$space + $unit};
        }
    }